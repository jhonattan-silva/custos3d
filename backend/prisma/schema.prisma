// Schema do Prisma para sistema de precificação de peças 3D
// Documentação: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de usuários
model Usuario {
  id                  Int         @id @default(autoincrement())
  nome                String?
  email               String?     @unique
  senha               String?
  provedorOauth       String?     @map("provedor_oauth")
  idProvedorOauth     String?     @map("id_provedor_oauth")
  tipoPlano           String      @default("gratuito") @map("tipo_plano")
  status              String      @default("ativo")
  roleId              Int         @default(1) @map("role_id")
  ultimoLogin         DateTime?   @map("ultimo_login")
  criadoEm            DateTime    @default(now()) @map("criado_em")
  atualizadoEm        DateTime    @updatedAt @map("atualizado_em")
  
  // Relacionamento com role
  role                Role        @relation(fields: [roleId], references: [id])
  
  // Relacionamentos existentes
  planilhas           Planilha[]
  maquinas            Maquina[]
  materiais           Material[]
  tiposMaoObra        TipoMaoObra[]
  projetos            Projeto[]
  
  @@map("usuarios")
}

// Modelo de roles (novo)
model Role {
  id              Int      @id @default(autoincrement())
  nome            String   @unique
  descricao       String?
  ativo           Boolean  @default(true)
  criadoEm        DateTime @default(now()) @map("criado_em")
  
  // Relacionamentos
  usuarios        Usuario[]
  rolePermissoes  RolePermissao[]
  
  @@map("roles")
}

// Modelo de permissões (novo)
model Permissao {
  id              Int      @id @default(autoincrement())
  nome            String   @unique
  descricao       String?
  modulo          String
  acao            String
  criadoEm        DateTime @default(now()) @map("criado_em")
  
  // Relacionamentos
  rolePermissoes  RolePermissao[]
  
  @@map("permissoes")
}

// Modelo de relacionamento role-permissões (novo)
model RolePermissao {
  id            Int      @id @default(autoincrement())
  roleId        Int      @map("role_id")
  permissaoId   Int      @map("permissao_id")
  criadoEm      DateTime @default(now()) @map("criado_em")
  
  // Relacionamentos
  role          Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissao     Permissao @relation(fields: [permissaoId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissaoId])
  @@map("role_permissoes")
}

// Modelo de planilhas
model Planilha {
  id                    Int      @id @default(autoincrement())
  idUsuario             Int      @map("id_usuario")
  nome                  String   @default("Minha Planilha")
  dadosBase             Json     @map("dados_base")
  colunasPersonalizadas Json     @map("colunas_personalizadas")
  criadaEm              DateTime @default(now()) @map("criada_em")
  atualizadaEm          DateTime @updatedAt @map("atualizada_em")
  
  // Relacionamento com usuário
  usuario               Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
  
  @@map("planilhas")
}

// Equipamentos de produção
model Maquina {
  id                 Int      @id @default(autoincrement())
  usuarioId          Int      @map("id_usuario")
  nome               String
  marca              String?
  modelo             String?
  precoCompra        Float?   @map("preco_compra")
  custoEnergiaHora   Float    @default(0.15) @map("custo_energia_hora")
  taxaDepreciacao    Float    @default(0.1) @map("taxa_depreciacao")
  vidaUtilHoras      Int?     @map("vida_util_horas")
  consumoWatts       Int?     @map("consumo_watts")
  observacoes        String?
  ativa              Boolean  @default(true)
  criadoEm           DateTime @default(now()) @map("criado_em")
  atualizadoEm       DateTime @updatedAt @map("atualizado_em")
  
  // Relacionamentos
  usuario     Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  itens       ItemProjeto[]

  @@map("maquinas")
}

// Materiais/Insumos
model Material {
  id                 Int      @id @default(autoincrement())
  usuarioId          Int      @map("id_usuario")
  nome               String
  tipoMaterial       String   @map("tipo_material")
  precoUnidade       Float    @map("preco_unidade")
  unidadeMedida      String   @default("kg") @map("unidade_medida")
  cor                String?
  densidadeGCm3      Float?   @map("densidade_g_cm3")
  temperaturaImpressao Int?   @map("temperatura_impressao")
  fornecedor         String?
  ativo              Boolean  @default(true)
  criadoEm           DateTime @default(now()) @map("criado_em")
  atualizadoEm       DateTime @updatedAt @map("atualizado_em")
  
  // Relacionamentos
  usuario     Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  itens       ItemProjeto[]

  @@map("materiais")
}

// Tipos de serviço/mão de obra
model TipoMaoObra {
  id              Int      @id @default(autoincrement())
  usuarioId       Int      @map("id_usuario")
  nome            String
  categoria       String
  valorPorMinuto  Float    @map("valor_por_minuto")
  descricao       String?
  ativo           Boolean  @default(true)
  criadoEm        DateTime @default(now()) @map("criado_em")
  atualizadoEm    DateTime @updatedAt @map("atualizado_em")
  
  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("tipos_mao_obra")
}

// Renomear Planilha para Projeto (mais apropriado)
model Projeto {
  id                    Int      @id @default(autoincrement())
  usuarioId             Int      @map("id_usuario") 
  nome                  String   @default("Novo Projeto")
  nomeCliente           String?  @map("nome_cliente")
  status                String   @default("rascunho")
  valorTotalEstimado    Float?   @map("valor_total_estimado")
  margemLucroPercent    Float    @default(30) @map("margem_lucro_percent")
  moeda                 String   @default("BRL")
  dadosBase             Json     @map("dados_base")
  colunasPersonalizadas Json     @map("colunas_personalizadas")
  criadoEm              DateTime @default(now()) @map("criado_em")
  atualizadoEm          DateTime @updatedAt @map("atualizado_em")
  
  // Relacionamentos
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  itens   ItemProjeto[]

  @@map("projetos")
}

// Itens do projeto (linhas da planilha)
model ItemProjeto {
  id                   Int      @id @default(autoincrement())
  projetoId            Int      @map("id_projeto")
  maquinaId            Int?     @map("id_maquina")
  materialId           Int?     @map("id_material")
  ordemItem            Int      @map("ordem_item")
  camposPadrao         Json     @map("campos_padrao")
  camposCalculados     Json     @map("campos_calculados")
  camposPersonalizados Json     @map("campos_personalizados")
  criadoEm             DateTime @default(now()) @map("criado_em")
  atualizadoEm         DateTime @updatedAt @map("atualizado_em")
  
  // Relacionamentos
  projeto  Projeto  @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  maquina  Maquina? @relation(fields: [maquinaId], references: [id])
  material Material? @relation(fields: [materialId], references: [id])

  @@map("itens_projeto")
}
